diff --color -Z -Naur iob-cache/hardware/src/front-end.v iob-cache-challenge/hardware/src/front-end.v
--- iob-cache/hardware/src/front-end.v	2022-04-20 14:19:26.058267794 -0400
+++ iob-cache-challenge/hardware/src/front-end.v	2022-04-20 17:19:53.763459781 -0400
@@ -128,4 +128,61 @@
    assign data_wstrb_reg = wstrb_reg;
    assign data_valid_reg = valid_reg;
    
+   // Addition for Mayhem testing - corner cases 
+   reg [7:0] debugOutput;
+   reg debugOutput2, debugOutput3, debugOutput4;
+   always @(posedge clk)
+    begin
+      if(ready == 1)
+        if (wstrb == 0)
+          if( addr[FE_ADDR_W-1:FE_BYTE_W] == 13'h1234 && rdata == 32'hDEADBEEF)
+              begin
+                assign debugOutput = 8'h1;
+                debugOutput2 <= 1;
+                debugOutput3 <= 0;
+                debugOutput4 <= 1;
+              end
+          else if( addr[FE_ADDR_W-1:FE_BYTE_W] == 13'h579 && rdata == 32'hCAFEEFAC)
+              begin
+                assign debugOutput = 8'h2;
+                debugOutput2 <= 0;
+                debugOutput3 <= 0;
+                debugOutput4 <= 1;
+              end
+          else if( addr[FE_ADDR_W-1:FE_BYTE_W] == 13'h308 && rdata == 32'h01020304)
+              begin
+                assign debugOutput = 8'h3;
+                debugOutput2 <= 1;
+                debugOutput3 <= 1;
+                debugOutput4 <= 0;
+              end
+          else if( addr[FE_ADDR_W-1:FE_BYTE_W] == 13'hF00 && rdata == 32'hF1E2D3C4)
+              begin
+                assign debugOutput = 8'h4;
+                debugOutput2 <= 0;
+                debugOutput3 <= 1;
+                debugOutput4 <= 0;
+              end
+          else if( addr[FE_ADDR_W-1:FE_BYTE_W] == 13'h169 && rdata == 32'hA1B2C3D4)
+              begin
+                assign debugOutput = 8'h5;
+                debugOutput2 <= 1;
+                debugOutput3 <= 1;
+                debugOutput4 <= 1;
+              end
+          else
+              begin
+                assign debugOutput = 8'h0;
+                debugOutput2 <= 0;
+                debugOutput3 <= 0;
+                debugOutput4 <= 0;
+              end
+        else
+        begin
+          assign debugOutput = 8'hx;
+          debugOutput2 <= 1'bx;
+          debugOutput3 <= 1'bx;
+          debugOutput4 <= 1'bx;
+        end
+    end
 endmodule
diff --color -Z -Naur iob-cache/hardware/src/iob-cache.v iob-cache-challenge/hardware/src/iob-cache.v
--- iob-cache/hardware/src/iob-cache.v	2022-04-20 14:19:26.058267794 -0400
+++ iob-cache-challenge/hardware/src/iob-cache.v	2022-04-20 17:20:13.939892162 -0400
@@ -55,18 +55,24 @@
     input                                       force_inv_in, //force 1'b0 if unused
     output                                      force_inv_out, 
     input                                       wtb_empty_in, //force 1'b1 if unused
-    output                                      wtb_empty_out, 
+    output                                      wtb_empty_out 
 `endif  
     //Slave i/f - Native
-    output                                      mem_valid,
-    output [BE_ADDR_W-1:0]                      mem_addr,
-    output [BE_DATA_W-1:0]                      mem_wdata,
-    output [BE_NBYTES-1:0]                      mem_wstrb,
-    input [BE_DATA_W-1:0]                       mem_rdata,
-    input                                       mem_ready
+    //output                                      mem_valid,
+    //output [BE_ADDR_W-1:0]                      mem_addr,
+    //output [BE_DATA_W-1:0]                      mem_wdata,
+    //output [BE_NBYTES-1:0]                      mem_wstrb,
+    //input [BE_DATA_W-1:0]                       mem_rdata,
+    //input                                       mem_ready
     );
-
-   
+    // begin Mayhem
+    wire [BE_DATA_W-1:0]                      mem_rdata;
+    wire                                      mem_valid;
+    wire [BE_ADDR_W-1:0]                      mem_addr;
+    wire [BE_DATA_W-1:0]                      mem_wdata;
+    wire [BE_NBYTES-1:0]                      mem_wstrb;
+    reg                                       mem_ready;
+    // end Mayhem
    //internal signals (front-end inputs)
    wire                                         data_valid, data_ready;
    wire [FE_ADDR_W -1:FE_BYTE_W]                data_addr; 
@@ -244,8 +250,26 @@
       .mem_rdata (mem_rdata),
       .mem_ready (mem_ready)  
       );
-   
-   
+   // begin Mayhem
+   `define MEM_ADDR_W 15
+   `define MEM_DATA_W 64
+    iob_sp_ram #(
+       .DATA_W(`MEM_DATA_W),
+       .ADDR_W(`MEM_ADDR_W-2)
+      )
+    native_ram(
+         .clk(clk),
+         .en   (mem_valid),
+         .we   (mem_wstrb),
+         .addr (mem_addr[`MEM_ADDR_W-1:$clog2(`MEM_DATA_W/8)]),
+         .dout (mem_rdata),
+         .din  (mem_wdata)
+    );
+    // end Mayhem
+    always @(posedge clk)
+        begin
+         mem_ready <= mem_valid;
+        end
    
    generate
       if (CTRL_CACHE)
